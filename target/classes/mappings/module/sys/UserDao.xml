<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.module.sys.dao.UserDao">

    <sql id="userData">
    	a.user_id,
    	a.login_name,
    	a.password,
    	a.depart_id,
		a.user_type,
		a.lastlogin_ip,
		a.lastlogin_time,
		a.status,
		a.create_time
    </sql>
	
	<select id="get" resultType="User">
		SELECT
			<include refid="userData"/>
		FROM hotel_user a
		WHERE a.user_id = #{id}
	</select>
	
	<!-- 根据登录名查询用户 -->
	<select id="getByLoginName" resultType="User" parameterType="User">
		SELECT
			<include refid="userData"/>
		FROM hotel_user a
		WHERE a.login_name = #{loginName}
	</select>
	
	<!-- 根据userId查询用户 -->
	<select id="findUserByUserId" resultType="User" parameterType="User">
		SELECT
			<include refid="userData"/>
		FROM hotel_user a
		WHERE a.user_id = #{userId}
	</select>
	
	<!-- 校验手机号是否已存在 -->
	<select id="checkPhone"  parameterType="User"  resultType="User">
		SELECT a.login_name 
		FROM hotel_user a 
		WHERE a.login_name=#{loginName}
	</select>
	
	<!-- 用户找回密码/更新新密码 -->
	<update id="updatePassword">
		UPDATE hotel_user SET 
			password = #{password} 
		WHERE login_name = #{loginName}
	</update>
	
	<!-- 更新用户密码 -->
	<update id="updatePasswordById">
		UPDATE hotel_user SET 
			password = #{password} 
		WHERE user_id = #{userId}
	</update>
	
	<!-- 更新登录信息，如登录IP、登录时间 -->
	<update id="updateLoginInfo">
		UPDATE hotel_user SET 
			lastlogin_ip = #{lastLoginIp}, 
			lastlogin_time= #{lastLoginTime} 
		WHERE user_id = #{userId}
	</update>
	
	<!-- 邮箱注册用户激活状态修改 -->
	<update id="teacherPass">
		UPDATE hotel_user SET 
			status = '1'
		WHERE user_id = #{userId}
	</update>
	
	<!-- 用户注册时,保存用户信息 -->
	<insert id="insert">
		insert into hotel_user(user_id, login_name,password,depart_id,
				user_type,create_time,status)
		values(#{userId},#{loginName},#{password},#{departId},
				#{userType},#{createTime},#{status}) 
	</insert>
	
	<!-- 删除用户 -->
	<delete id="delete">
			DELETE FROM hotel_user WHERE user_id = #{userId}
	</delete>
	
	<!-- 删除用户所有的角色 -->
	<delete id="deleteRoleByUser">
			DELETE FROM hotel_user_role WHERE user_id=#{userId}
	</delete>

</mapper>